[{"C:\\Users\\Zbook\\Downloads\\Compressed\\todo_react_app-master\\todo_react_app-master\\src\\index.js":"1","C:\\Users\\Zbook\\Downloads\\Compressed\\todo_react_app-master\\todo_react_app-master\\src\\App.js":"2"},{"size":252,"mtime":1657516146000,"results":"3","hashOfConfig":"4"},{"size":13050,"mtime":1716723976859,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"9"},"73ekvk",{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},"C:\\Users\\Zbook\\Downloads\\Compressed\\todo_react_app-master\\todo_react_app-master\\src\\index.js",["14","15","16"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nimport {\n\tMantineProvider,\n\tColorSchemeProvider,\n\tColorScheme,\n} from '@mantine/core';\n\nReactDOM.createRoot(document.getElementById('root')).render(<App />);\n","C:\\Users\\Zbook\\Downloads\\Compressed\\todo_react_app-master\\todo_react_app-master\\src\\App.js",["17"],[],"import React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n    Button,\n    Container,\n    Text,\n    Title,\n    Modal,\n    TextInput,\n    Group,\n    Card,\n    ActionIcon,\n} from '@mantine/core';\nimport { MoonStars, Sun, Trash, Edit, Check } from 'tabler-icons-react';\n\nimport {\n    MantineProvider,\n    ColorSchemeProvider,\n} from '@mantine/core';\nimport { useColorScheme } from '@mantine/hooks';\nimport { useHotkeys, useLocalStorage } from '@mantine/hooks';\n\nexport default function App() {\n    const [tasks, setTasks] = useState([]);\n    const [opened, setOpened] = useState(false);\n    const [editingTask, setEditingTask] = useState(null);\n    const [currentTaskId, setCurrentTaskId] = useState(null);\n    const [currentTaskDetails, setCurrentTaskDetails] = useState(null); // Ajout de l'état pour les détails de la tâche\n\n    const preferredColorScheme = useColorScheme();\n    const [colorScheme, setColorScheme] = useLocalStorage({\n        key: 'mantine-color-scheme',\n        defaultValue: 'light',\n        getInitialValueInEffect: true,\n    });\n    const toggleColorScheme = value =>\n        setColorScheme(value || (colorScheme === 'dark' ? 'light' : 'dark'));\n\n    useHotkeys([['mod+J', () => toggleColorScheme()]]);\n\n    const taskTitle = useRef('');\n    const taskSummary = useRef('');\n\n    function createTask() {\n        const newTask = {\n            title: taskTitle.current.value,\n            summary: taskSummary.current.value,\n            status: ''// Ajout de la propriété completed avec la valeur false\n        };\n\n        axios.post('https://rdc83wu5s2.execute-api.us-east-1.amazonaws.com/tasks/', newTask)\n            .then(response => {\n                setTasks([...tasks, response.data.item]);\n                setOpened(false);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }\n\n    function deleteTask(index) {\n        const taskId = tasks[index].id;\n        axios.delete(`https://mjiv5dnhmb.execute-api.us-east-1.amazonaws.com/tasks/${taskId}`)\n            .then(() => {\n                const clonedTasks = [...tasks];\n                clonedTasks.splice(index, 1);\n                setTasks(clonedTasks);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }\n\n    function loadTasks() {\n        axios.get('https://0gaedahjpg.execute-api.us-east-1.amazonaws.com/tasks/')\n            .then(response => {\n                setTasks(response.data.items);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }\n\n    function updateTask() {\n        const updatedTask = {\n            title: taskTitle.current.value,\n            summary: taskSummary.current.value,\n        };\n\n        axios.put(`https://hk55zu99r0.execute-api.us-east-1.amazonaws.com/add/${currentTaskId}`, updatedTask)\n            .then(response => {\n                const updatedTasks = tasks.map((task, index) => {\n                    if (index === editingTask) {\n                        return response.data.item;\n                    }\n                    return task;\n                });\n\n                setTasks(updatedTasks);\n                setEditingTask(null);\n                setCurrentTaskId(null);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }\n\n    function markTaskComplete(taskId, currentStatus) {\n        const updatedStatus = currentStatus === 'completed' ? 'empty' : 'completed'; // Inverser l'état actuel de la tâche\n\n        axios.put(`https://y2i6e939y8.execute-api.us-east-1.amazonaws.com/com/${taskId}`, { status: updatedStatus })\n            .then(response => {\n                const updatedTasks = tasks.map(task => {\n                    if (task.id === taskId) {\n                        return { ...task, status: updatedStatus };\n                    }\n                    return task;\n                });\n                setTasks(updatedTasks);\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }\n\n    function loadTaskDetails(taskId) {\n        axios.get(`https://d3attkgu35.execute-api.us-east-1.amazonaws.com/tasks/${taskId}`)\n            .then(response => {\n                setCurrentTaskDetails(response.data.item); // Met à jour l'état des détails de la tâche avec les données reçues\n            })\n            .catch(error => {\n                console.error(error);\n            });\n    }\n\n    useEffect(() => {\n        loadTasks();\n    }, []);\n\n    function showTaskDetails(taskId) {\n        setCurrentTaskId(taskId);\n        loadTaskDetails(taskId);\n    }\n\n    function handleEditTask(index) {\n        setOpened(true);\n        setEditingTask(index);\n        setCurrentTaskId(tasks[index].id);\n        taskTitle.current.value = tasks[index].title;\n        taskSummary.current.value = tasks[index].summary;\n    }\n\n    return (\n        <ColorSchemeProvider\n            colorScheme={colorScheme}\n            toggleColorScheme={toggleColorScheme}>\n            <MantineProvider\n                theme={{ colorScheme, defaultRadius: 'md' }}\n                withGlobalStyles\n                withNormalizeCSS>\n                <div className='App'>\n                    <Modal\n                        opened={opened}\n                        size={'md'}\n                        title={editingTask !== null ? 'Edit Task' : 'New Task'}\n                        withCloseButton={false}\n                        onClose={() => {\n                            setOpened(false);\n                            setEditingTask(null);\n                            setCurrentTaskId(null);\n                        }}\n                        centered>\n                        <TextInput\n                            mt={'md'}\n                            ref={taskTitle}\n                            placeholder={'Task Title'}\n                            required\n                            label={'Title'}\n                            defaultValue={editingTask !== null ? tasks[editingTask].title : ''}\n                        />\n                        <TextInput\n                            ref={taskSummary}\n                            mt={'md'}\n                            placeholder={'Task Summary'}\n                            label={'Summary'}\n                            defaultValue={editingTask !== null ? tasks[editingTask].summary : ''}\n                        />\n                        <Group mt={'md'} position={'apart'}>\n                            <Button\n                                onClick={() => {\n                                    setOpened(false);\n                                    setEditingTask(null);\n                                    setCurrentTaskId(null);\n                                }}\n                                variant={'subtle'}>\n                                Cancel\n                            </Button>\n                            <Button\n                                onClick={() => {\n                                    if (editingTask !== null) {\n                                        updateTask();\n                                    } else {\n                                        createTask();\n                                    }\n                                    setOpened(false);\n                                }}>\n                                {editingTask !== null ? 'Save Changes' : 'Create Task'}\n                            </Button>\n                        </Group>\n                    </Modal>\n                    <Container size={550} my={40}>\n                        <Group position={'apart'}>\n                            <Title\n                                sx={theme => ({\n                                    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n                                    fontWeight: 900,\n                                })}>\n                                My Tasks\n                            </Title>\n                            <ActionIcon\n                                color={'blue'}\n                                onClick={() => toggleColorScheme()}\n                                size='lg'>\n                                {colorScheme === 'dark' ? (\n                                    <Sun size={16} />\n                                ) : (\n                                    <MoonStars size={16} />\n                                )}\n                            </ActionIcon>\n                        </Group>\n                        {tasks.length > 0 ? (\n                            tasks.map((task, index) => (\n                                <Card withBorder key={task.id}>\n                                    <Group position={'apart'}>\n                                        <Text weight={'bold'}>{task.title}</Text>\n                                        <Group>\n                                            <Button\n                                                variant=\"outline\"\n                                                onClick={() => handleEditTask(index)}\n                                                leftIcon={<Edit />}\n                                            >\n                                                Edit\n                                            </Button>\n                                            <Button\n                                                variant=\"outline\"\n                                                onClick={() => markTaskComplete(task.id, task.status)}\n                                                color={task.status === 'completed' ? 'green' : 'blue'}\n                                                leftIcon={<Check />}\n                                            >\n                                                {task.status === 'completed' ? 'Undo' : 'Complete'}\n                                            </Button>\n                                            <Button\n                                                onClick={() => showTaskDetails(task.id)}\n                                                variant=\"outline\"\n                                                color=\"blue\"\n                                            >\n                                                View Details\n                                            </Button>\n                                            <ActionIcon\n                                                onClick={() => deleteTask(index)}\n                                                color={'red'}\n                                                variant={'transparent'}\n                                            >\n                                                <Trash />\n                                            </ActionIcon>\n                                        </Group>\n                                    </Group>\n                                    <Text color={'dimmed'} size={'md'} mt={'sm'}>\n                                        {task.summary ? task.summary : 'No summary was provided for this task'}\n                                    </Text>\n                                </Card>\n                            ))\n                        ) : (\n                            <Text size={'lg'} mt={'md'} color={'dimmed'}>\n                                You have no tasks\n                            </Text>\n                        )}\n                        <Button\n                            onClick={() => {\n                                setOpened(true);\n                            }}\n                            fullWidth\n                            mt={'md'}>\n                            New Task\n                        </Button>\n                    </Container>\n                    {currentTaskDetails && (\n                        <Container size={550} my={40}>\n                            <Card withBorder>\n                                <Group position={'apart'}>\n                                    <Text weight={'bold'}>{currentTaskDetails.title}</Text>\n                                    <Text color={currentTaskDetails.status === 'completed' ? 'green' : 'blue'}>\n                                        {currentTaskDetails.status}\n                                    </Text>\n                                </Group>\n                                <Text color={'dimmed'} size={'md'} mt={'sm'}>\n                                    {currentTaskDetails.summary}\n                                </Text>\n                                <Text color={'dimmed'} size={'sm'} mt={'sm'}>\n                                    Created At: {currentTaskDetails.createdAt}\n                                </Text>\n                                <Text color={'dimmed'} size={'sm'}>\n                                    Updated At: {currentTaskDetails.updatedAt}\n                                </Text>\n                            </Card>\n                        </Container>\n                    )}\n                </div>\n            </MantineProvider>\n        </ColorSchemeProvider>\n    );\n}\n",{"ruleId":"18","severity":1,"message":"19","line":6,"column":2,"nodeType":"20","messageId":"21","endLine":6,"endColumn":17},{"ruleId":"18","severity":1,"message":"22","line":7,"column":2,"nodeType":"20","messageId":"21","endLine":7,"endColumn":21},{"ruleId":"18","severity":1,"message":"23","line":8,"column":2,"nodeType":"20","messageId":"21","endLine":8,"endColumn":13},{"ruleId":"18","severity":1,"message":"24","line":30,"column":11,"nodeType":"20","messageId":"21","endLine":30,"endColumn":31},"no-unused-vars","'MantineProvider' is defined but never used.","Identifier","unusedVar","'ColorSchemeProvider' is defined but never used.","'ColorScheme' is defined but never used.","'preferredColorScheme' is assigned a value but never used."]